// <auto-generated />
using System;
using FitVerse.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitVerse.Data.Migrations
{
    [DbContext(typeof(FitVerseDbContext))]
    [Migration("20251101195532_update-ExercisePlan")]
    partial class updateExercisePlan
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoachId");

                    b.HasIndex("PackageId");

                    b.ToTable("ClientSubscription");
                });

            modelBuilder.Entity("CoachPackage", b =>
                {
                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.HasKey("CoachId", "PackageId");

                    b.HasIndex("PackageId");

                    b.ToTable("CoachPackage");
                });

            modelBuilder.Entity("FitVerse.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("joinedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FitVerse.Data.Models.Anatomy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Anatomies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "/images/anatomy/chest.png",
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 2,
                            Image = "/images/anatomy/back.png",
                            Name = "Back"
                        },
                        new
                        {
                            Id = 3,
                            Image = "/images/anatomy/legs.png",
                            Name = "Legs"
                        },
                        new
                        {
                            Id = 4,
                            Image = "/images/anatomy/arms.png",
                            Name = "Arms"
                        },
                        new
                        {
                            Id = 5,
                            Image = "/images/anatomy/shoulders.png",
                            Name = "Shoulders"
                        });
                });

            modelBuilder.Entity("FitVerse.Data.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoachId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("StartWeight")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Coach", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id = "C1",
                            About = "Expert in Strength and Conditioning",
                            ExperienceYears = 8,
                            ImagePath = "/images/coaches/john.jpg",
                            IsActive = true,
                            Name = "John Smith"
                        },
                        new
                        {
                            Id = "C2",
                            About = "Cardio and endurance specialist with personalized HIIT plans.",
                            ExperienceYears = 6,
                            ImagePath = "/images/coaches/sarah.jpg",
                            IsActive = true,
                            Name = "Sarah Johnson"
                        },
                        new
                        {
                            Id = "C3",
                            About = "Yoga and mobility instructor focused on flexibility and wellness.",
                            ExperienceYears = 7,
                            ImagePath = "/images/coaches/michael.jpg",
                            IsActive = true,
                            Name = "Michael Lee"
                        },
                        new
                        {
                            Id = "C4",
                            About = "CrossFit certified coach delivering high-intensity programs.",
                            ExperienceYears = 5,
                            ImagePath = "/images/coaches/chris.jpg",
                            IsActive = true,
                            Name = "Chris Evans"
                        },
                        new
                        {
                            Id = "C5",
                            About = "Boxing and MMA trainer with focus on endurance and strength.",
                            ExperienceYears = 4,
                            ImagePath = "/images/coaches/amanda.jpg",
                            IsActive = true,
                            Name = "Amanda Davis"
                        },
                        new
                        {
                            Id = "C6",
                            About = "Professional bodybuilder and muscle growth expert.",
                            ExperienceYears = 10,
                            ImagePath = "/images/coaches/robert.jpg",
                            IsActive = true,
                            Name = "Robert Wilson"
                        },
                        new
                        {
                            Id = "C7",
                            About = "Running and endurance coach with marathon training expertise.",
                            ExperienceYears = 5,
                            ImagePath = "/images/coaches/emily.jpg",
                            IsActive = true,
                            Name = "Emily Clark"
                        },
                        new
                        {
                            Id = "C8",
                            About = "Nutrition and weight loss expert with balanced diet programs.",
                            ExperienceYears = 6,
                            ImagePath = "/images/coaches/david.jpg",
                            IsActive = true,
                            Name = "David Harris"
                        });
                });

            modelBuilder.Entity("FitVerse.Data.Models.CoachFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("CoachId");

                    b.ToTable("CoachFeedbacks");
                });

            modelBuilder.Entity("FitVerse.Data.Models.CoachSpecialties", b =>
                {
                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoachId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("CoachSpecialties");
                });

            modelBuilder.Entity("FitVerse.Data.Models.DietPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ActivityMultiplier")
                        .HasColumnType("float");

                    b.Property<double>("CarbInGrams")
                        .HasColumnType("float");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("FatsInGrams")
                        .HasColumnType("float");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProteinInGrams")
                        .HasColumnType("float");

                    b.Property<double>("TotalCal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoachId");

                    b.ToTable("DietPlans");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "/images/equipment/barbell.png",
                            Name = "Barbell"
                        },
                        new
                        {
                            Id = 2,
                            Image = "/images/equipment/bodyweight.png",
                            Name = "Bodyweight"
                        },
                        new
                        {
                            Id = 3,
                            Image = "/images/equipment/dumbbell.png",
                            Name = "Dumbbell"
                        },
                        new
                        {
                            Id = 4,
                            Image = "/images/equipment/machine.png",
                            Name = "Machine"
                        },
                        new
                        {
                            Id = 5,
                            Image = "/images/equipment/cable.png",
                            Name = "Cable"
                        });
                });

            modelBuilder.Entity("FitVerse.Data.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("MuscleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MuscleId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Classic chest exercise using a barbell.",
                            EquipmentId = 1,
                            MuscleId = 1,
                            Name = "Bench Press",
                            VideoLink = "https://www.youtube.com/watch?v=rT7DgCr-3pg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Bodyweight exercise targeting the chest and triceps.",
                            EquipmentId = 2,
                            MuscleId = 1,
                            Name = "Push Ups",
                            VideoLink = "https://www.youtube.com/watch?v=_l3ySVKYVJ8"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Upper back exercise using body weight.",
                            EquipmentId = 2,
                            MuscleId = 3,
                            Name = "Pull Ups",
                            VideoLink = "https://www.youtube.com/watch?v=eGo4IYlbE5g"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Compound movement targeting the back.",
                            EquipmentId = 1,
                            MuscleId = 3,
                            Name = "Barbell Rows",
                            VideoLink = "https://www.youtube.com/watch?v=vT2GjY_Umpw"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Leg exercise working quads and glutes.",
                            EquipmentId = 1,
                            MuscleId = 5,
                            Name = "Squats",
                            VideoLink = "https://www.youtube.com/watch?v=aclHkVaku9U"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Isolated arm exercise for biceps.",
                            EquipmentId = 1,
                            MuscleId = 6,
                            Name = "Bicep Curls",
                            VideoLink = "https://www.youtube.com/watch?v=ykJmrZ5v0Oo"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Overhead press targeting the deltoid.",
                            EquipmentId = 1,
                            MuscleId = 7,
                            Name = "Shoulder Press",
                            VideoLink = "https://www.youtube.com/watch?v=B-aVuyhvLHU"
                        });
                });

            modelBuilder.Entity("FitVerse.Data.Models.ExercisePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationWeeks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoachId");

                    b.ToTable("ExercisePlans");
                });

            modelBuilder.Entity("FitVerse.Data.Models.ExercisePlanDetail", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("ExercisePlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfRepeats")
                        .HasColumnType("int");

                    b.Property<int>("NumOfSets")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId", "ExercisePlanId");

                    b.HasIndex("ExercisePlanId");

                    b.ToTable("ExercisePlanDetails");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ReciverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReciverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Muscle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnatomyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnatomyId");

                    b.ToTable("Muscles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnatomyId = 1,
                            Description = "Main chest muscle responsible for pushing movements.",
                            Name = "Pectoralis Major"
                        },
                        new
                        {
                            Id = 2,
                            AnatomyId = 1,
                            Description = "Smaller chest muscle beneath pectoralis major.",
                            Name = "Pectoralis Minor"
                        },
                        new
                        {
                            Id = 3,
                            AnatomyId = 2,
                            Description = "Large back muscle used in pulling actions.",
                            Name = "Latissimus Dorsi"
                        },
                        new
                        {
                            Id = 4,
                            AnatomyId = 2,
                            Description = "Upper back and neck muscle responsible for posture.",
                            Name = "Trapezius"
                        },
                        new
                        {
                            Id = 5,
                            AnatomyId = 3,
                            Description = "Front thigh muscle responsible for leg extension.",
                            Name = "Quadriceps"
                        },
                        new
                        {
                            Id = 6,
                            AnatomyId = 4,
                            Description = "Front upper arm muscle responsible for arm flexion.",
                            Name = "Biceps"
                        },
                        new
                        {
                            Id = 7,
                            AnatomyId = 5,
                            Description = "Main shoulder muscle responsible for arm rotation.",
                            Name = "Deltoid"
                        });
                });

            modelBuilder.Entity("FitVerse.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ReciverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RefId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReciverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Sessions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PackageId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClientSubscription", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Client", "Client")
                        .WithMany("ClientSubscriptions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitVerse.Data.Models.Coach", "Coach")
                        .WithMany("ClientSubscriptions")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitVerse.Data.Models.Package", "Package")
                        .WithMany("ClientSubscriptions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coach");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CoachPackage", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Coach", "Coach")
                        .WithMany("CoachPackages")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitVerse.Data.Models.Package", "Package")
                        .WithMany("CoachPackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Chat", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Client", "Client")
                        .WithMany("Chats")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitVerse.Data.Models.Coach", "Coach")
                        .WithMany("Chats")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Client", b =>
                {
                    b.HasOne("FitVerse.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Coach", b =>
                {
                    b.HasOne("FitVerse.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitVerse.Data.Models.CoachFeedback", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Client", "Client")
                        .WithOne("CoachFeedback")
                        .HasForeignKey("FitVerse.Data.Models.CoachFeedback", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitVerse.Data.Models.Coach", "Coach")
                        .WithMany("CoachFeedbacks")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("FitVerse.Data.Models.CoachSpecialties", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Coach", "Coach")
                        .WithMany("CoachSpecialties")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitVerse.Data.Models.Specialty", "Specialty")
                        .WithMany("CoachSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("FitVerse.Data.Models.DietPlan", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Client", "Client")
                        .WithMany("DietPlans")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitVerse.Data.Models.Coach", "Coach")
                        .WithMany("DietPlans")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Exercise", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Equipment", "Equipment")
                        .WithMany("Exercises")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitVerse.Data.Models.Muscle", "Muscle")
                        .WithMany("Exercises")
                        .HasForeignKey("MuscleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Muscle");
                });

            modelBuilder.Entity("FitVerse.Data.Models.ExercisePlan", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Client", "Client")
                        .WithMany("ExercisePlans")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitVerse.Data.Models.Coach", "Coach")
                        .WithMany("ExercisePlans")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("FitVerse.Data.Models.ExercisePlanDetail", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Exercise", "Exercise")
                        .WithMany("ExercisePlanDetails")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitVerse.Data.Models.ExercisePlan", "ExercisePlan")
                        .WithMany("ExercisePlanDetails")
                        .HasForeignKey("ExercisePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ExercisePlan");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Message", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitVerse.Core.Models.ApplicationUser", "Reciver")
                        .WithMany()
                        .HasForeignKey("ReciverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitVerse.Core.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Reciver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Muscle", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Anatomy", "Anatomy")
                        .WithMany("Muscles")
                        .HasForeignKey("AnatomyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anatomy");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Notification", b =>
                {
                    b.HasOne("FitVerse.Core.Models.ApplicationUser", "Reciver")
                        .WithMany()
                        .HasForeignKey("ReciverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciver");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Payment", b =>
                {
                    b.HasOne("FitVerse.Data.Models.Client", "Client")
                        .WithMany("Payments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitVerse.Data.Models.Package", "Package")
                        .WithMany("Payments")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FitVerse.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitVerse.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitVerse.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FitVerse.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitVerse.Data.Models.Anatomy", b =>
                {
                    b.Navigation("Muscles");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Client", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("ClientSubscriptions");

                    b.Navigation("CoachFeedback");

                    b.Navigation("DietPlans");

                    b.Navigation("ExercisePlans");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Coach", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("ClientSubscriptions");

                    b.Navigation("CoachFeedbacks");

                    b.Navigation("CoachPackages");

                    b.Navigation("CoachSpecialties");

                    b.Navigation("DietPlans");

                    b.Navigation("ExercisePlans");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Equipment", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Exercise", b =>
                {
                    b.Navigation("ExercisePlanDetails");
                });

            modelBuilder.Entity("FitVerse.Data.Models.ExercisePlan", b =>
                {
                    b.Navigation("ExercisePlanDetails");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Muscle", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Package", b =>
                {
                    b.Navigation("ClientSubscriptions");

                    b.Navigation("CoachPackages");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FitVerse.Data.Models.Specialty", b =>
                {
                    b.Navigation("CoachSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
