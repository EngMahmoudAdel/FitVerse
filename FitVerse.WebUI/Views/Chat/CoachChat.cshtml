
@{
    ViewData["Title"] = "CoachChat";
    Layout = "~/Views/Shared/_CoachLayout.cshtml";
}

<div class="row g-4">
    <!-- Conversations List -->
    <div class="col-lg-4">
        <div class="card-custom" style="height: 700px; display: flex; flex-direction: column;">
            <div class="card-header-custom">
                <i class="bi bi-chat-dots me-2"></i> Messages
            </div>
            <div class="p-3 border-bottom">
                <input type="text" class="form-control-custom" placeholder="Search conversations...">
            </div>
            <div id="conversationsList" class="flex-grow-1 overflow-auto">
                <!-- Active Chats Section -->
                <div id="activeChatsSection">
                    <!-- This will be populated by JavaScript -->
                </div>
                
                <!-- Available Clients Section -->
                <div class="p-3 border-bottom bg-light">
                    <h6 class="mb-2 text-muted">Available Clients</h6>
                </div>
                
                @if (ViewBag.AvailableClients != null)
                {
                    @foreach (var client in (IEnumerable<FitVerse.Data.Models.Client>)ViewBag.AvailableClients)
                    {
                        <div class="p-3 border-bottom client-item" style="cursor: pointer;" data-client-id="@client.UserId" data-client-name="@client.User.FullName">
                            <div class="d-flex align-items-center gap-3">
                                <div class="position-relative">
                                    <img src="@(string.IsNullOrEmpty(client.User.ImagePath) ? $"https://ui-avatars.com/api/?name={client.User.FullName}&background=6366f1&color=fff" : client.User.ImagePath)" 
                                         alt="@client.User" style="width: 50px; height: 50px; border-radius: 50%;">
                                    <span class="position-absolute bottom-0 end-0" style="width: 12px; height: 12px; background: @(client.User.Status=="Acive" ? "#10b981" : "#94a3b8"); border: 2px solid white; border-radius: 50%;"></span>
                                </div>
                                <div class="flex-grow-1">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <div class="fw-semibold">@client.User.FullName</div>
                                        <small class="text-muted">@client.User.Age years old</small>
                                    </div>
                                    <div class="small text-muted text-truncate">Goal: @client.Goal</div>
                                </div>
                                <button class="btn btn-sm btn-primary start-chat-btn" data-client-id="@client.UserId">
                                    <i class="bi bi-chat-dots"></i>
                                </button>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <!-- Chat Window -->
    <div class="col-lg-8">
        <div class="chat-container">
            <!-- Chat Header -->
            <div id="chatHeader" class="chat-header" style="display: none;">
                <!-- This will be populated dynamically when a chat is selected -->
            </div>

            <!-- Chat Messages -->
            <div id="chatMessages" class="chat-messages">
                <div class="text-center p-4 text-muted">
                    <i class="bi bi-chat-dots fs-1"></i>
                    <p class="mt-2">Select a chat to start messaging</p>
                </div>
            </div>

            <!-- Chat Input -->
            <div class="chat-input-container">
                <div class="chat-input-wrapper">
                    <button class="btn btn-light rounded-circle" style="width: 45px; height: 45px;">
                        <i class="bi bi-paperclip"></i>
                    </button>
                    <button class="btn btn-light rounded-circle" style="width: 45px; height: 45px;">
                        <i class="bi bi-emoji-smile"></i>
                    </button>
                    <input type="text" id="messageInput" placeholder="Type your message..." class="form-control">
                    <button id="sendButton" class="chat-send-btn">
                        <i class="bi bi-send-fill"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

@section Scripts {
    <script src="https://unpkg.com/@@microsoft/signalr@8.0.0/dist/browser/signalr.min.js"></script>
    <script>
        let connection;
        let currentChatId = null;
        let currentUserId = '@ViewBag.UserId';
        let currentReceiverId = null;
        let typingTimer;

        // Initialize SignalR connection
        function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .build();

            connection.start().then(() => {
                console.log("SignalR Connected");
                loadUserChats();
            }).catch(err => console.error("SignalR Connection Error: ", err));

            // Handle incoming messages
            connection.on("ReceiveMessage", messageData => {
                console.log('Received message:', messageData);
                if (messageData.ChatId == currentChatId) {
                    appendMessage(messageData);
                    scrollToBottom();
                }
                updateConversationsList();
            });

            // Handle message read status
            connection.on("MessageRead", messageId => {
                markMessageAsRead(messageId);
            });

            // Handle typing indicators (no more chatId)
            connection.on("UserTyping", senderId => {
                if (senderId !== currentUserId && senderId === currentReceiverId) {
                    showTypingIndicator();
                }
            });

            connection.on("UserStoppedTyping", senderId => {
                if (senderId !== currentUserId && senderId === currentReceiverId) {
                    hideTypingIndicator();
                }
            });

            // Handle online/offline status
            connection.on("UserOnline", userId => updateUserStatus(userId, true));
            connection.on("UserOffline", userId => updateUserStatus(userId, false));
        }

        // Load chats
        function loadUserChats() {
            fetch('/Chat/GetUserChats')
                .then(r => r.json())
                .then(displayChats)
                .catch(err => console.error('Error loading chats:', err));
        }

        // Display chat list
        function displayChats(chats) {
            const section = document.getElementById('activeChatsSection');
            section.innerHTML = '';

            if (chats?.length) {
                const header = document.createElement('div');
                header.className = 'p-3 border-bottom bg-light';
                header.innerHTML = '<h6 class="mb-2 text-muted">Active Chats</h6>';
                section.appendChild(header);

                chats.forEach(chat => {
                    const el = createChatElement(chat);
                    section.appendChild(el);
                });
            }
        }

        // Chat item
        function createChatElement(chat) {
            const div = document.createElement('div');
            div.className = 'p-3 border-bottom chat-item';
            div.style.cursor = 'pointer';
            div.dataset.chatId = chat.Id;
            div.dataset.receiverId = chat.OtherUserId;

            const unreadBadge = chat.UnreadCount > 0
                ? `<span class="badge bg-primary rounded-circle" style="width: 20px; height: 20px;">${chat.UnreadCount}</span>`
                : '';

            div.innerHTML = `
                <div class="d-flex align-items-center gap-3">
                    <div class="position-relative">
                        <img src="${chat.OtherUserAvatar}" alt="User" style="width: 50px; height: 50px; border-radius: 50%;">
                        <span class="position-absolute bottom-0 end-0 user-status"
                              style="width: 12px; height: 12px; background: ${chat.IsOnline ? '#10b981' : '#94a3b8'};
                              border: 2px solid white; border-radius: 50%;"></span>
                    </div>
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-1">
                            <div class="fw-semibold">${chat.OtherUserName}</div>
                            <small class="text-muted">${chat.LatestMessageTime}</small>
                        </div>
                        <div class="small text-muted text-truncate">${chat.LatestMessage}</div>
                    </div>
                    ${unreadBadge}
                </div>
            `;

            div.addEventListener('click', () => selectChat(chat.Id, chat.OtherUserId, chat.OtherUserName));
            return div;
        }

        // Select chat
        function selectChat(chatId, receiverId, receiverName) {
            currentChatId = chatId;
            currentReceiverId = receiverId;

            updateChatHeader(receiverName, receiverId);
            document.querySelectorAll('.chat-item').forEach(item => item.style.background = '');
            document.querySelector(`[data-chat-id="${chatId}"]`).style.background = 'rgba(99, 102, 241, 0.05)';

            loadChatMessages(chatId);
            markChatAsRead(chatId);
        }

        // Load chat messages
        function loadChatMessages(chatId) {
            fetch(`/Chat/GetChatMessages?chatId=${chatId}`)
                .then(r => r.json())
                .then(messages => {
                    displayMessages(messages);
                    scrollToBottom();
                })
                .catch(err => console.error('Error loading messages:', err));
        }

        function displayMessages(messages) {
            const container = document.getElementById('chatMessages');
            container.innerHTML = `<div class="text-center my-3"><span class="badge bg-secondary">Today</span></div>`;
            messages.forEach(m => appendMessage(m));
        }

        function appendMessage(message) {
            const chatMessages = document.getElementById('chatMessages');
            const div = document.createElement('div');
            const isCurrentUser = message.SenderId === currentUserId || message.IsCurrentUser;

            div.className = `message-bubble ${isCurrentUser ? 'sent' : 'received'}`;
            div.innerHTML = `
                <div class="message-content">${message.Content}</div>
                <div class="message-time ${isCurrentUser ? 'text-end' : ''}">${message.SentAt}</div>
            `;
            chatMessages.appendChild(div);
        }

        // Send message
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();

            if (message && currentChatId && currentReceiverId) {
                connection.invoke("SendMessage", currentChatId.toString(), currentReceiverId, message)
                    .catch(err => console.error('Error sending message:', err));

                input.value = '';
                stopTyping();
            }
        }

        // Typing events
        function startTyping() {
            if (currentReceiverId) {
                connection.invoke("UserTyping", currentReceiverId);
            }
        }

        function stopTyping() {
            if (currentReceiverId) {
                connection.invoke("UserStoppedTyping", currentReceiverId);
            }
        }

        function showTypingIndicator() {
            const chatMessages = document.getElementById('chatMessages');
            if (!document.getElementById('typingIndicator')) {
                const div = document.createElement('div');
                div.id = 'typingIndicator';
                div.className = 'message-bubble received';
                div.innerHTML = `
                    <div class="message-content">
                        <div class="d-flex gap-1">
                            <span class="spinner-grow spinner-grow-sm" style="width:8px;height:8px;"></span>
                            <span class="spinner-grow spinner-grow-sm" style="width:8px;height:8px;"></span>
                            <span class="spinner-grow spinner-grow-sm" style="width:8px;height:8px;"></span>
                        </div>
                    </div>
                `;
                chatMessages.appendChild(div);
                scrollToBottom();
            }
        }

        function hideTypingIndicator() {
            const el = document.getElementById('typingIndicator');
            if (el) el.remove();
        }

        function scrollToBottom() {
            const container = document.getElementById('chatMessages');
            container.scrollTop = container.scrollHeight;
        }

        function updateChatHeader(receiverName, receiverId) {
            const header = document.getElementById('chatHeader');
            header.innerHTML = `
                <img src="https://ui-avatars.com/api/?name=${receiverName}&background=6366f1&color=fff" class="user-avatar">
                <div class="user-info flex-grow-1">
                    <h6>${receiverName}</h6>
                    <p>Client • Online</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-light rounded-circle"><i class="bi bi-telephone"></i></button>
                    <button class="btn btn-sm btn-light rounded-circle"><i class="bi bi-camera-video"></i></button>
                    <button class="btn btn-sm btn-light rounded-circle"><i class="bi bi-three-dots-vertical"></i></button>
                </div>
            `;
            header.style.display = 'flex';
        }

        function markChatAsRead(chatId) {
            fetch('/Chat/MarkAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({ chatId })
            });
        }

        function markMessageAsRead(messageId) {
            console.log(`Message ${messageId} marked as read`);
        }

        function updateUserStatus(userId, isOnline) {
            document.querySelectorAll(`[data-receiver-id="${userId}"] .user-status`)
                .forEach(el => el.style.background = isOnline ? '#10b981' : '#94a3b8');
        }

        function updateConversationsList() {
            loadUserChats();
        }

        document.addEventListener('DOMContentLoaded', () => {
            initializeSignalR();

            document.getElementById('sendButton').addEventListener('click', sendMessage);

            document.getElementById('messageInput').addEventListener('keypress', e => {
                if (e.key === 'Enter') sendMessage();
            });

            document.getElementById('messageInput').addEventListener('input', () => {
                startTyping();
                clearTimeout(typingTimer);
                typingTimer = setTimeout(stopTyping, 1000);
            });

            document.querySelectorAll('.start-chat-btn').forEach(btn => {
                btn.addEventListener('click', e => {
                    e.stopPropagation();
                    const clientId = btn.getAttribute('data-client-id');
                    startChatWithUser(clientId);
                });
            });
        });

        function startChatWithUser(otherUserId) {
            fetch('/Chat/CreateChat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({ OtherUserId: otherUserId })
            })
            .then(r => r.json())
            .then(data => {
                if (data.success) {
                    loadUserChats();
                    selectChat(data.chatId, otherUserId, data.otherUserName);
                } else {
                    console.error('Error creating chat:', data.message);
                }
            })
            .catch(err => console.error('Error starting chat:', err));
        }
    </script>
}


